//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ImageConfiguration) DeepCopyInto(out *ImageConfiguration) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ImageConfiguration.
func (in *ImageConfiguration) DeepCopy() *ImageConfiguration {
	if in == nil {
		return nil
	}
	out := new(ImageConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Landscaper) DeepCopyInto(out *Landscaper) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Landscaper.
func (in *Landscaper) DeepCopy() *Landscaper {
	if in == nil {
		return nil
	}
	out := new(Landscaper)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Landscaper) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LandscaperList) DeepCopyInto(out *LandscaperList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Landscaper, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LandscaperList.
func (in *LandscaperList) DeepCopy() *LandscaperList {
	if in == nil {
		return nil
	}
	out := new(LandscaperList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *LandscaperList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LandscaperProviderConfiguration) DeepCopyInto(out *LandscaperProviderConfiguration) {
	*out = *in
	out.LandscaperController = in.LandscaperController
	out.LandscaperWebhooksServer = in.LandscaperWebhooksServer
	out.HelmDeployer = in.HelmDeployer
	out.ManifestDeployer = in.ManifestDeployer
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LandscaperProviderConfiguration.
func (in *LandscaperProviderConfiguration) DeepCopy() *LandscaperProviderConfiguration {
	if in == nil {
		return nil
	}
	out := new(LandscaperProviderConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LandscaperSpec) DeepCopyInto(out *LandscaperSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LandscaperSpec.
func (in *LandscaperSpec) DeepCopy() *LandscaperSpec {
	if in == nil {
		return nil
	}
	out := new(LandscaperSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LandscaperStatus) DeepCopyInto(out *LandscaperStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LandscaperStatus.
func (in *LandscaperStatus) DeepCopy() *LandscaperStatus {
	if in == nil {
		return nil
	}
	out := new(LandscaperStatus)
	in.DeepCopyInto(out)
	return out
}
